
generator client { provider = "prisma-client-js" }
datasource db { provider = "mysql" url = env("DATABASE_URL") }

model Warehouse {
  id        String   @id @default(cuid())
  name      String   @unique
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  stocks    Stock[]
  devices   Device[]
}

model Item {
  id        String   @id @default(cuid())
  sku       String   @unique
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  stocks    Stock[]
}

model Stock {
  id          String    @id @default(cuid())
  warehouseId String
  itemId      String
  qty         Int       @default(0)
  updatedAt   DateTime  @updatedAt
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  item        Item      @relation(fields: [itemId], references: [id], onDelete: Cascade)
  @@unique([warehouseId, itemId])
}

enum MovementType { IN OUT ADJ }

model Movement {
  id          String       @id @default(cuid())
  warehouseId String
  itemId      String
  qty         Int
  type        MovementType
  ref         String?
  createdAt   DateTime     @default(now())
  warehouse   Warehouse    @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  item        Item         @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

model Order {
  id        String   @id @default(cuid())
  number    String   @unique
  status    String   @default("NEW")
  createdAt DateTime @default(now())
}

model Shipment {
  id        String   @id @default(cuid())
  orderId   String
  number    String   @unique
  status    String   @default("CREATED")
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  events    ShipmentEvent[]
  items     ShipmentItem[]
}

model ShipmentEvent {
  id          String   @id @default(cuid())
  shipmentId  String
  code        String
  payload     Json?
  createdAt   DateTime @default(now())
  shipment    Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  @@index([shipmentId, code])
}

model ShipmentItem {
  id         String   @id @default(cuid())
  shipmentId String
  itemId     String
  qty        Int
  shipment   Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)
  item       Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  @@unique([shipmentId, itemId])
}

// IoT
model Device {
  id          String     @id @default(cuid())
  name        String
  type        String
  warehouseId String?
  lastSeenAt  DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  warehouse   Warehouse?  @relation(fields: [warehouseId], references: [id], onDelete: SetNull)
  keys        DeviceKey[]
  readings    Telemetry[]
}

model DeviceKey {
  id        String   @id @default(cuid())
  deviceId  String
  keyId     String   @unique
  secret    String
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)
}

model Telemetry {
  id        String   @id @default(cuid())
  deviceId  String
  ts        DateTime @default(now())
  type      String
  payload   Json
  seq       Int?
  createdAt DateTime @default(now())
  device    Device   @relation(fields: [deviceId], references: [id], onDelete: Cascade)
  @@index([deviceId, ts])
  @@unique([deviceId, seq])
}
